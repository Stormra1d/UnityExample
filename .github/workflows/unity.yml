name: UnityPipeline

on:
  push:
  workflow_dispatch:
    inputs:
      target_platform:
        description: 'Target Platform'
        required: true
        default: 'StandaloneWindows64'
        type: choice
        options:
          - StandaloneWindows64
          - StandaloneLinux64
          - WebGL
      run_tests:
        description: 'Run PlayMode tests'
        required: true
        default: true
        type: boolean
      run_build:
        description: 'Build project'
        required: true
        default: true
        type: boolean
      create_release:
        description: 'Create GitHub release'
        required: true
        default: true
        type: boolean

permissions:
  contents: write
  pull-requests: write
  checks: write
  pages: write
  id-token: write

env:
  PROJECT_PATH: .
  BUILD_NAME: UnityBuild
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL:    ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

jobs:
  unity_ci:
    name: Tests, Build, Artifacts, Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 1
      - name: Check disk usage
        run: |
          df -h
          docker system df || true
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          android: true
          haskell: true
          large-packages: true
          docker-images: false
          swap-storage: false
          dotnet: false
          tool-cache: false

      - name: Cache Library
        uses: actions/cache@v4
        with:
          path: ${{ env.PROJECT_PATH }}/Library
          key: Library-${{ runner.os }}-Unity${{ steps.unity.outputs.version }}-${{ hashFiles(format('{0}/Packages/manifest.json', env.PROJECT_PATH)) }}-${{ hashFiles(format('{0}/Packages/packages-lock.json', env.PROJECT_PATH)) }}
          restore-keys: |
            Library-${{ runner.os }}-Unity${{ steps.unity.outputs.version }}-

      - name: Set mode flags
        id: mode
        shell: bash
        run: |
          # Defaults
          run_tests="true"
          run_build="true"
          create_release="true"
          target_platform="StandaloneWindows64"

          echo "run_tests=${run_tests}"        >> $GITHUB_OUTPUT
          echo "run_build=${run_build}"        >> $GITHUB_OUTPUT
          echo "create_release=${create_release}" >> $GITHUB_OUTPUT
          echo "target_platform=${target_platform}" >> $GITHUB_OUTPUT

      - name: Hard-unset Unity activation envs
        run: |
          echo "UNITY_SERIAL="   >> "$GITHUB_ENV"

      - name: Detect UNITY_* envs
        run: |
          set -euo pipefail
          for v in UNITY_LICENSE UNITY_SERIAL UNITY_EMAIL UNITY_PASSWORD; do
            if [[ -v $v ]]; then
              eval "val=\${$v}"
              echo "$v is SET (len=${#val})"
            else
              echo "$v is NOT set"
            fi
          done
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          
      - name: Build
        if: steps.mode.outputs.run_build == 'true'
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE:  ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL:    ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ env.PROJECT_PATH }}
          targetPlatform: ${{ steps.mode.outputs.target_platform }}
          buildName: ${{ env.BUILD_NAME }}
          
      - name: Upload Build Artifact
        if: success() && steps.mode.outputs.run_build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ steps.mode.outputs.target_platform }}
          path: build/**/*
          retention-days: 30

      - name: Ensure artifacts dirs
        run: mkdir -p artifacts/performance

      - name: Run PlayMode Tests
        if: steps.mode.outputs.run_tests == 'true'
        uses: game-ci/unity-test-runner@v4
        env:
          UNITY_LICENSE:  ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL:    ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ env.PROJECT_PATH }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          testMode: PlayMode
          artifactsPath: artifacts
          customParameters: >
            -debugCodeOptimization
            -burst-disable-compilation
            -enableCodeCoverage
            -coverageResultsPath ./Coverage/Results
            -coverageHistoryPath ./Coverage/History
            -coverageOptions "generateHtmlReport;generateHtmlReportHistory;generateBadgeReport;generateAdditionalMetrics;verbosity:info;assemblyFilters:+<user>;-*Tests*;-*Editor*;pathFilters:-**/Tests/**"
            -testCategory "!SkipCI"
            -testResults artifacts/test-results.xml
            -perfTestResults artifacts/performance/perf-results.json
            -enableProfiler

      - name: Parse Performance Results
        if: always() && steps.mode.outputs.run_tests == 'true'
        run: |
          set -euo pipefail
          sudo apt-get update -y && sudo apt-get install -y jq
      
          JSON_PATH="artifacts/performance/perf-results.json"
          if [ ! -f "$JSON_PATH" ]; then
            echo "No performance test results found (missing $JSON_PATH)" >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
      
          {
            echo "## Performance Test Summary"
            echo
            echo "| Test | Metric | Median | Unit | FPS |"
            echo "|---|---|---:|---|---:|"
      
            jq -r '
              def unit_name($u):
                (["Nanosecond","Microsecond","Millisecond","Second",
                  "Byte","Kilobyte","Megabyte","Gigabyte","Undefined"][$u] // "Unknown");
      
              # choose root: .Results (3.1+), else .Tests, else array
              (if (.Results? | type=="array") then .Results
               elif (.Tests? | type=="array") then .Tests
               elif (type=="array") then .
               else [] end)
              | .[]
              | .Name as $test
              | (.SampleGroups // [])[]
              | . as $g
              | [
                  $test,
                  ($g.Name // "unknown"),
                  ($g.Median // $g.Average // $g.Min // "n/a"),
                  (if ($g.Unit|type)=="number" then unit_name($g.Unit) else ($g.Unit // "n/a") end),
                  (if (($g.Name=="Time") and (($g.Median // 0) > 0))
                     then (1000/($g.Median)) else empty end)
                ]
              | @tsv
            ' "$JSON_PATH" \
            | awk -F'\t' '{
                test=$1; metric=$2; med=$3; unit=$4; fps=$5;
                if (fps=="") printf("|%s|%s|%s|%s| |\n", test, metric, med, unit);
                else          printf("|%s|%s|%.2f|%s|%.1f|\n", test, metric, med, unit, fps);
              }'
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload Test Results (XML, logs, coverage)
        if: always() && steps.mode.outputs.run_tests == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: unity-test-results
          path: |
            artifacts/**/*.xml
            artifacts/**/*.log
            artifacts/performance/**/*.html
            artifacts/performance/**/*.json
            **/Logs/**
            Coverage/**
          retention-days: 14
        
      - name: Publish Test Results
        if: always() && steps.mode.outputs.run_tests == 'true'
        uses: dorny/test-reporter@main
        with:
          name: Unity PlayMode Tests
          path: 'artifacts/test-results.xml'
          reporter: dotnet-nunit
          fail-on-error: false
      
      - name: Create GitHub Release
        if: success() && steps.mode.outputs.run_build == 'true' && steps.mode.outputs.create_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: unity-build-${{ github.run_number }}
          name: Unity Build ${{ github.run_number }}
          body: |
            Automated Unity build from commit ${{ github.sha }}
            **Platform:** ${{ steps.mode.outputs.target_platform }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy_coverage:
    name: Publish Coverage to GitHub Pages
    needs: unity_ci
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: unity-test-results
          path: .
  
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: Coverage/Results
  
      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4

      - name: Add link to summary
        if: always()
        run: |
          echo "### Code Coverage" >> "$GITHUB_STEP_SUMMARY"
          echo "Latest report: ${{ steps.deploy.outputs.page_url }}" >> "$GITHUB_STEP_SUMMARY"
