name: UnityPipeline

on:
  push:
  workflow_dispatch:
    inputs:
      target_platform:
        description: 'Target Platform'
        required: true
        default: 'StandaloneWindows64'
        type: choice
        options:
          - StandaloneWindows64
          - StandaloneLinux64
          - WebGL
      run_tests:
        description: 'Run PlayMode tests'
        required: true
        default: true
        type: boolean
      run_build:
        description: 'Build project'
        required: true
        default: true
        type: boolean
      create_release:
        description: 'Create GitHub release'
        required: true
        default: true
        type: boolean

permissions:
  contents: write
  pull-requests: write
  checks: write

env:
  PROJECT_PATH: .
  BUILD_NAME: UnityBuild
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL:    ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

jobs:
  unity_ci:
    name: Tests, Build, Artifacts, Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 1
      - name: Check disk usage
        run: df -h
      - name: Clean up disk space
        run: |
          docker system prune -af
          sudo rm -rf /tmp/*
          sudo apt-get clean
          sudo rm -rf /usr/share/dotnet
      - name: Read Unity project version
        id: unity
        shell: bash
        run: |
          ver=$(grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' "$PROJECT_PATH/ProjectSettings/ProjectVersion.txt" | head -n1 || true)
          echo "version=${ver}" >> $GITHUB_OUTPUT
      
      - name: Cache Library
        uses: actions/cache@v4
        with:
          path: ${{ env.PROJECT_PATH }}/Library
          key: Library-${{ runner.os }}-Unity${{ steps.unity.outputs.version }}-${{ hashFiles(format('{0}/Packages/manifest.json', env.PROJECT_PATH)) }}-${{ hashFiles(format('{0}/Packages/packages-lock.json', env.PROJECT_PATH)) }}
          restore-keys: |
            Library-${{ runner.os }}-Unity${{ steps.unity.outputs.version }}-

      - name: Set mode flags
        id: mode
        shell: bash
        run: |
          # Defaults: PR = tests only; push main = tests+build; manual = use inputs
          run_tests="true"
          run_build="false"
          create_release="false"
          target_platform="StandaloneWindows64"

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            run_build="false"
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            run_build="true"
            create_release="true"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            run_tests="${{ github.event.inputs.run_tests }}"
            run_build="${{ github.event.inputs.run_build }}"
            create_release="${{ github.event.inputs.create_release }}"
            target_platform="${{ github.event.inputs.target_platform }}"
          fi

          echo "run_tests=${run_tests}"        >> $GITHUB_OUTPUT
          echo "run_build=${run_build}"        >> $GITHUB_OUTPUT
          echo "create_release=${create_release}" >> $GITHUB_OUTPUT
          echo "target_platform=${target_platform}" >> $GITHUB_OUTPUT

      - name: Debug license is present (length only)
        run: |
          echo "UNITY_LICENSE length: ${#UNITY_LICENSE}"
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

      - name: Hard-unset Unity activation envs
        run: |
          echo "UNITY_SERIAL="   >> "$GITHUB_ENV"

      - name: Detect UNITY_* envs
        run: |
          set -euo pipefail
          for v in UNITY_LICENSE UNITY_SERIAL UNITY_EMAIL UNITY_PASSWORD; do
            if [[ -v $v ]]; then
              eval "val=\${$v}"
              echo "$v is SET (len=${#val})"
            else
              echo "$v is NOT set"
            fi
          done
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

      - name: Run PlayMode Tests
        if: steps.mode.outputs.run_tests == 'true'
        uses: game-ci/unity-test-runner@v4
        env:
          UNITY_LICENSE:  ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL:    ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ env.PROJECT_PATH }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          testMode: PlayMode
          artifactsPath: artifacts
          customParameters: -enableCodeCoverage -coverageResultsPath ./Coverage -coverageOptions enableCyclomaticComplexity;generateHtmlReport

      - name: Upload Test Results (XML, logs, coverage)
        if: always() && steps.mode.outputs.run_tests == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: unity-test-results
          path: |
            artifacts/**/*.xml
            artifacts/**/*.log
            **/Logs/**
            Coverage/**
          retention-days: 14
      
      - name: Publish Test Results
        if: always() && steps.mode.outputs.run_tests == 'true'
        uses: dorny/test-reporter@main
        with:
          name: Unity PlayMode Tests
          path: 'artifacts/*.xml'
          reporter: dotnet-nunit
          fail-on-error: false
      
      - name: Build
        if: steps.mode.outputs.run_build == 'true'
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE:  ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL:    ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ env.PROJECT_PATH }}
          targetPlatform: ${{ steps.mode.outputs.target_platform }}
          buildName: ${{ env.BUILD_NAME }}
      
      - name: Upload Build Artifact
        if: success() && steps.mode.outputs.run_build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ steps.mode.outputs.target_platform }}
          path: build/**/*
          retention-days: 30
      
      - name: Create GitHub Release
        if: success() && steps.mode.outputs.run_build == 'true' && steps.mode.outputs.create_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: unity-build-${{ github.run_number }}
          name: Unity Build ${{ github.run_number }}
          body: |
            Automated Unity build from commit ${{ github.sha }}
            **Platform:** ${{ steps.mode.outputs.target_platform }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
